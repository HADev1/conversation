{"ast":null,"code":"var _jsxFileName = \"E:\\\\9thDimension\\\\Chat\\\\chat-app-second-phase\\\\frontend\\\\src\\\\components\\\\chat\\\\conversation-channel\\\\room-list.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport EmptyRoom from \"./empty-room\";\nimport socket from \"../../../socket\";\nimport SingleRoom from \"./single-room\";\nimport AppLoading from \"../../common/app-loading\";\nimport { changedCurrentRoom, getFilteredRooms, loadRooms } from \"../../../store/room\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function RoomList() {\n  _s();\n\n  const dispatch = useDispatch();\n  const rooms = useSelector(getFilteredRooms);\n  const isLoading = useSelector(state => state.room.isLoading);\n  useEffect(() => {\n    dispatch(loadRooms()); //  eslint-disable-next-line\n  }, []);\n\n  const handleRoomChange = room => {\n    dispatch(changedCurrentRoom(socket, room));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(AppLoading, {\n      isSmall: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }, this), rooms.length === 0 && /*#__PURE__*/_jsxDEV(EmptyRoom, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 30\n    }, this), !isLoading && rooms.map(room => /*#__PURE__*/_jsxDEV(SingleRoom, {\n      room: room,\n      isOnline: room.isOnline,\n      onRoomChanged: handleRoomChange\n    }, room.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n}\n\n_s(RoomList, \"5/uN2AFIPcb4CI8/3ofzxHAem3Y=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = RoomList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoomList\");","map":{"version":3,"sources":["E:/9thDimension/Chat/chat-app-second-phase/frontend/src/components/chat/conversation-channel/room-list.jsx"],"names":["useEffect","useDispatch","useSelector","EmptyRoom","socket","SingleRoom","AppLoading","changedCurrentRoom","getFilteredRooms","loadRooms","RoomList","dispatch","rooms","isLoading","state","room","handleRoomChange","length","map","isOnline","id"],"mappings":";;;AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAAQC,kBAAR,EAA4BC,gBAA5B,EAA8CC,SAA9C,QAA8D,qBAA9D;;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AACjC,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,KAAK,GAAGV,WAAW,CAACM,gBAAD,CAAzB;AACA,QAAMK,SAAS,GAAGX,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWF,SAArB,CAA7B;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,QAAQ,CAACF,SAAS,EAAV,CAAR,CADc,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMO,gBAAgB,GAAID,IAAD,IAAU;AACjCJ,IAAAA,QAAQ,CAACJ,kBAAkB,CAACH,MAAD,EAASW,IAAT,CAAnB,CAAR;AACD,GAFD;;AAIA,sBACE;AAAA,eACGF,SAAS,iBAAI,QAAC,UAAD;AAAY,MAAA,OAAO;AAAnB;AAAA;AAAA;AAAA;AAAA,YADhB,EAEGD,KAAK,CAACK,MAAN,KAAiB,CAAjB,iBAAsB,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAFzB,EAGG,CAACJ,SAAD,IAAcD,KAAK,CAACM,GAAN,CAAUH,IAAI,iBAC3B,QAAC,UAAD;AAEE,MAAA,IAAI,EAAEA,IAFR;AAGE,MAAA,QAAQ,EAAEA,IAAI,CAACI,QAHjB;AAIE,MAAA,aAAa,EAAEH;AAJjB,OACOD,IAAI,CAACK,EADZ;AAAA;AAAA;AAAA;AAAA,YADa,CAHjB;AAAA,kBADF;AAaD;;GA3BuBV,Q;UACLT,W,EACHC,W,EACIA,W;;;KAHIQ,Q","sourcesContent":["import {useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport EmptyRoom from \"./empty-room\";\nimport socket from \"../../../socket\";\nimport SingleRoom from \"./single-room\";\nimport AppLoading from \"../../common/app-loading\";\nimport {changedCurrentRoom, getFilteredRooms, loadRooms} from \"../../../store/room\";\n\nexport default function RoomList() {\n  const dispatch = useDispatch();\n  const rooms = useSelector(getFilteredRooms);\n  const isLoading = useSelector(state => state.room.isLoading);\n\n  useEffect(() => {\n    dispatch(loadRooms());\n    //  eslint-disable-next-line\n  }, []);\n\n  const handleRoomChange = (room) => {\n    dispatch(changedCurrentRoom(socket, room));\n  };\n\n  return (\n    <>\n      {isLoading && <AppLoading isSmall/>}\n      {rooms.length === 0 && <EmptyRoom/>}\n      {!isLoading && rooms.map(room => (\n        <SingleRoom\n          key={room.id}\n          room={room}\n          isOnline={room.isOnline}\n          onRoomChanged={handleRoomChange}/>\n      ))}\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}