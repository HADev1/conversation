{"ast":null,"code":"var _jsxFileName = \"E:\\\\9thDimension\\\\Chat\\\\chat-app-second-phase\\\\frontend\\\\src\\\\routes\\\\is-auth.jsx\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport userStorage from \"../store/local/user\";\nimport { routeNames } from \"./route-name\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProtectedRoute({\n  isAuth = false,\n  component: Component,\n  ...rest\n}) {\n  const user = userStorage.getUser();\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => {\n      if (isAuth && !user) {\n        return /*#__PURE__*/_jsxDEV(RedirectToLogin, { ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 18\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 16\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\n_c = ProtectedRoute;\n\nfunction RedirectToLogin({ ...props\n}) {\n  return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: {\n      pathname: routeNames.login,\n      state: {\n        from: props.location\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = RedirectToLogin;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ProtectedRoute\");\n$RefreshReg$(_c2, \"RedirectToLogin\");","map":{"version":3,"sources":["E:/9thDimension/Chat/chat-app-second-phase/frontend/src/routes/is-auth.jsx"],"names":["Redirect","Route","userStorage","routeNames","ProtectedRoute","isAuth","component","Component","rest","user","getUser","props","RedirectToLogin","pathname","login","state","from","location"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,KAAnB,QAAgC,kBAAhC;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,SAASC,UAAT,QAA2B,cAA3B;;AAEA,eAAe,SAASC,cAAT,CAAwB;AACrCC,EAAAA,MAAM,GAAG,KAD4B;AAErCC,EAAAA,SAAS,EAAEC,SAF0B;AAGrC,KAAGC;AAHkC,CAAxB,EAIZ;AACD,QAAMC,IAAI,GAAGP,WAAW,CAACQ,OAAZ,EAAb;AAEA,sBACE,QAAC,KAAD,OACMF,IADN;AAEE,IAAA,MAAM,EAAGG,KAAD,IAAW;AACjB,UAAIN,MAAM,IAAI,CAACI,IAAf,EAAqB;AACnB,4BAAO,QAAC,eAAD,OAAqBE;AAArB;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD;;AACD,0BAAO,QAAC,SAAD,OAAeA;AAAf;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;AAPH;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;KAlBuBP,c;;AAoBxB,SAASQ,eAAT,CAAyB,EAAE,GAAGD;AAAL,CAAzB,EAAuC;AACrC,sBACE,QAAC,QAAD;AACE,IAAA,EAAE,EAAE;AAAEE,MAAAA,QAAQ,EAAEV,UAAU,CAACW,KAAvB;AAA8BC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAEL,KAAK,CAACM;AAAd;AAArC;AADN;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;MANQL,e","sourcesContent":["import { Redirect, Route } from \"react-router-dom\";\nimport userStorage from \"../store/local/user\";\nimport { routeNames } from \"./route-name\";\n\nexport default function ProtectedRoute({\n  isAuth = false,\n  component: Component,\n  ...rest\n}) {\n  const user = userStorage.getUser();\n\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        if (isAuth && !user) {\n          return <RedirectToLogin {...props} />;\n        }\n        return <Component {...props} />;\n      }}\n    />\n  );\n}\n\nfunction RedirectToLogin({ ...props }) {\n  return (\n    <Redirect\n      to={{ pathname: routeNames.login, state: { from: props.location } }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}