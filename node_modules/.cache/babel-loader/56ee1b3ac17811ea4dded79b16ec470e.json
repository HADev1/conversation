{"ast":null,"code":"import { createSelector, createSlice } from \"@reduxjs/toolkit\";\nimport * as apiActions from \"../api\";\nimport { removeProvider } from \"../provider\";\nimport { REDUX_STORE, SERVER_ROUTES, SOCKET } from \"../../utils/app\";\nimport { loadChatMessages } from \"../chat\";\nconst initialState = {\n  list: [],\n  isLoading: false,\n  currentRoom: null\n};\nconst roomSlice = createSlice({\n  name: \"room\",\n  initialState,\n  reducers: {\n    roomsRequested: (rooms, actions) => {\n      rooms.isLoading = true;\n    },\n    roomsReceived: (rooms, actions) => {\n      rooms.list = actions.payload.rooms;\n      rooms.isLoading = false;\n    },\n    currentRoomChanged: (rooms, actions) => {\n      rooms.currentRoom = actions.payload;\n    }\n  }\n});\nconst {\n  roomsRequested,\n  roomsReceived,\n  currentRoomChanged\n} = roomSlice.actions;\nexport default roomSlice.reducer; // SELECTORS\n\nexport const getFilteredRooms = createSelector(state => state.search.searchText, state => state.room.list, (searchMsg, rooms) => {\n  return rooms.filter(room => room.user.name.toLowerCase().includes(searchMsg));\n}); // ACTIONS\n\nexport const loadRooms = () => (dispatch, getState) => {\n  const actionDispatch = () => {\n    dispatch(apiActions.apiCallBegan({\n      url: SERVER_ROUTES.room.getAllUserRooms,\n      onStart: roomsRequested.type,\n      onSuccess: roomsReceived.type\n    }));\n  };\n\n  if (!REDUX_STORE.room.isEnableCache) {\n    actionDispatch();\n    return;\n  }\n\n  const {\n    room\n  } = getState();\n\n  if (!room.list || room.list.length === 0) {\n    actionDispatch();\n  }\n};\nexport const createRoom = (socket, opponentUserId) => (dispatch, getState) => {\n  socket.emit(SOCKET.emitters.createRoom, {\n    userId: opponentUserId\n  }, room => {\n    console.log(\"room from server: \", room);\n    dispatch(removeProvider(opponentUserId));\n  });\n};\nexport const changedCurrentRoom = (socket, room) => (dispatch, getState) => {\n  dispatch(currentRoomChanged(room));\n  dispatch(loadChatMessages(socket, room.id));\n};","map":{"version":3,"sources":["E:/9thDimension/Chat/chat-app-second-phase/frontend/src/store/room/index.js"],"names":["createSelector","createSlice","apiActions","removeProvider","REDUX_STORE","SERVER_ROUTES","SOCKET","loadChatMessages","initialState","list","isLoading","currentRoom","roomSlice","name","reducers","roomsRequested","rooms","actions","roomsReceived","payload","currentRoomChanged","reducer","getFilteredRooms","state","search","searchText","room","searchMsg","filter","user","toLowerCase","includes","loadRooms","dispatch","getState","actionDispatch","apiCallBegan","url","getAllUserRooms","onStart","type","onSuccess","isEnableCache","length","createRoom","socket","opponentUserId","emit","emitters","userId","console","log","changedCurrentRoom","id"],"mappings":"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","sourcesContent":["import {createSelector, createSlice} from \"@reduxjs/toolkit\";\nimport * as apiActions from \"../api\";\nimport {removeProvider} from \"../provider\";\nimport {REDUX_STORE, SERVER_ROUTES, SOCKET} from \"../../utils/app\";\nimport {loadChatMessages} from \"../chat\";\n\nconst initialState = {\n  list: [],\n  isLoading: false,\n  currentRoom: null\n};\n\nconst roomSlice = createSlice({\n  name: \"room\",\n  initialState,\n  reducers: {\n    roomsRequested: (rooms, actions) => {\n      rooms.isLoading = true;\n    },\n    roomsReceived: (rooms, actions) => {\n      rooms.list = actions.payload.rooms;\n      rooms.isLoading = false;\n    },\n    currentRoomChanged: (rooms, actions) => {\n      rooms.currentRoom = actions.payload;\n    }\n  }\n});\n\nconst {roomsRequested, roomsReceived, currentRoomChanged} = roomSlice.actions;\nexport default roomSlice.reducer;\n\n// SELECTORS\nexport const getFilteredRooms = createSelector(\n  state => state.search.searchText,\n  state => state.room.list,\n  (searchMsg, rooms) => {\n    return rooms.filter(room => room.user.name.toLowerCase().includes(searchMsg));\n  }\n);\n\n// ACTIONS\nexport const loadRooms = () => (dispatch, getState) => {\n  const actionDispatch = () => {\n    dispatch(\n      apiActions.apiCallBegan({\n        url: SERVER_ROUTES.room.getAllUserRooms,\n        onStart: roomsRequested.type,\n        onSuccess: roomsReceived.type\n      })\n    );\n  };\n\n  if (!REDUX_STORE.room.isEnableCache) {\n    actionDispatch();\n    return;\n  }\n\n  const {room} = getState();\n  if (!room.list || room.list.length === 0) {\n    actionDispatch();\n  }\n};\n\nexport const createRoom = (socket, opponentUserId) => (dispatch, getState) => {\n  socket.emit(SOCKET.emitters.createRoom, {userId: opponentUserId}, room => {\n    console.log(\"room from server: \", room);\n    dispatch(removeProvider(opponentUserId));\n  });\n};\n\nexport const changedCurrentRoom = (socket, room) => (dispatch, getState) => {\n  dispatch(currentRoomChanged(room));\n  dispatch(loadChatMessages(socket, room.id));\n};"]},"metadata":{},"sourceType":"module"}