{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport nprogress from \"nprogress\";\nexport default function useApi(apiFunc, {\n  hasCatchError = false,\n  keyExtractor = \"\"\n} = {}) {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [data, setData] = useState();\n  const [error, setError] = useState();\n\n  async function request(...params) {\n    setIsLoading(true);\n    nprogress.start();\n\n    try {\n      const res = await apiFunc(...params);\n      setIsLoading(false);\n\n      if (keyExtractor === \"\") {\n        setData(res.data);\n      } else {\n        setData(res.data[keyExtractor]);\n      }\n\n      setError({});\n      nprogress.done();\n      console.log(res);\n      return res;\n    } catch (err) {\n      console.log(\"error from server: \", err.response);\n      setIsLoading(false);\n\n      if (err.response) {\n        setError(err.response);\n      } else {\n        const errRes = {\n          status: 503,\n          data: {\n            message: \"Network Error. Please check your connection ..\",\n            errors: []\n          }\n        };\n        err.response = errRes;\n        setError(err.response);\n      }\n\n      nprogress.done();\n\n      if (hasCatchError) {\n        throw err;\n      }\n    }\n  }\n\n  return {\n    isLoading,\n    data,\n    error,\n    request\n  };\n}\n\n_s(useApi, \"V5ve98GLti8QHaiBY8sEsvnBwvo=\");","map":{"version":3,"sources":["E:/9thDimension/Chat/chat-app-second-phase/frontend/src/hooks/use-api.js"],"names":["useState","nprogress","useApi","apiFunc","hasCatchError","keyExtractor","isLoading","setIsLoading","data","setData","error","setError","request","params","start","res","done","console","log","err","response","errRes","status","message","errors"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,eAAe,SAASC,MAAT,CACbC,OADa,EAEb;AAAEC,EAAAA,aAAa,GAAG,KAAlB;AAAyBC,EAAAA,YAAY,GAAG;AAAxC,IAA+C,EAFlC,EAGb;AAAA;;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,EAAhC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,EAAlC;;AAEA,iBAAeY,OAAf,CAAuB,GAAGC,MAA1B,EAAkC;AAChCN,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAN,IAAAA,SAAS,CAACa,KAAV;;AAEA,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMZ,OAAO,CAAC,GAAGU,MAAJ,CAAzB;AACAN,MAAAA,YAAY,CAAC,KAAD,CAAZ;;AAEA,UAAIF,YAAY,KAAK,EAArB,EAAyB;AACvBI,QAAAA,OAAO,CAACM,GAAG,CAACP,IAAL,CAAP;AACD,OAFD,MAEO;AACLC,QAAAA,OAAO,CAACM,GAAG,CAACP,IAAJ,CAASH,YAAT,CAAD,CAAP;AACD;;AAEDM,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAV,MAAAA,SAAS,CAACe,IAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,aAAOA,GAAP;AACD,KAdD,CAcE,OAAOI,GAAP,EAAY;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCC,GAAG,CAACC,QAAvC;AACAb,MAAAA,YAAY,CAAC,KAAD,CAAZ;;AAEA,UAAIY,GAAG,CAACC,QAAR,EAAkB;AAChBT,QAAAA,QAAQ,CAACQ,GAAG,CAACC,QAAL,CAAR;AACD,OAFD,MAEO;AACL,cAAMC,MAAM,GAAG;AACbC,UAAAA,MAAM,EAAE,GADK;AAEbd,UAAAA,IAAI,EAAE;AACJe,YAAAA,OAAO,EAAE,gDADL;AAEJC,YAAAA,MAAM,EAAE;AAFJ;AAFO,SAAf;AAOAL,QAAAA,GAAG,CAACC,QAAJ,GAAeC,MAAf;AACAV,QAAAA,QAAQ,CAACQ,GAAG,CAACC,QAAL,CAAR;AACD;;AAEDnB,MAAAA,SAAS,CAACe,IAAV;;AAEA,UAAIZ,aAAJ,EAAmB;AACjB,cAAMe,GAAN;AACD;AACF;AACF;;AAED,SAAO;AAAEb,IAAAA,SAAF;AAAaE,IAAAA,IAAb;AAAmBE,IAAAA,KAAnB;AAA0BE,IAAAA;AAA1B,GAAP;AACD;;GArDuBV,M","sourcesContent":["import { useState } from \"react\";\nimport nprogress from \"nprogress\";\n\nexport default function useApi(\n  apiFunc,\n  { hasCatchError = false, keyExtractor = \"\" } = {}\n) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [data, setData] = useState();\n  const [error, setError] = useState();\n\n  async function request(...params) {\n    setIsLoading(true);\n    nprogress.start();\n\n    try {\n      const res = await apiFunc(...params);\n      setIsLoading(false);\n\n      if (keyExtractor === \"\") {\n        setData(res.data);\n      } else {\n        setData(res.data[keyExtractor]);\n      }\n\n      setError({});\n      nprogress.done();\n      console.log(res);\n      return res;\n    } catch (err) {\n      console.log(\"error from server: \", err.response);\n      setIsLoading(false);\n\n      if (err.response) {\n        setError(err.response);\n      } else {\n        const errRes = {\n          status: 503,\n          data: {\n            message: \"Network Error. Please check your connection ..\",\n            errors: [],\n          },\n        };\n        err.response = errRes;\n        setError(err.response);\n      }\n\n      nprogress.done();\n\n      if (hasCatchError) {\n        throw err;\n      }\n    }\n  }\n\n  return { isLoading, data, error, request };\n}\n"]},"metadata":{},"sourceType":"module"}