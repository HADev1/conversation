{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { SOCKET } from \"../../utils/app\";\nconst initialState = {\n  list: [],\n  isLoading: false\n};\nconst chatSlice = createSlice({\n  name: \"chat\",\n  initialState,\n  reducers: {\n    chatRequested: (chats, actions) => {\n      chats.isLoading = true;\n    },\n    chatsReceived: (chats, actions) => {\n      chats.list = actions.payload;\n      chats.isLoading = false;\n    }\n  }\n});\nconst {\n  chatRequested,\n  chatsReceived\n} = chatSlice.actions;\nexport default chatSlice.reducer; // ACTIONS\n\nexport const loadChatMessages = (socket, roomId) => (dispatch, getState) => {\n  dispatch(chatRequested());\n  socket.emit(SOCKET.emitters.joinRoom, {\n    roomId\n  }, ({\n    msgHistory\n  }) => {\n    console.log(\"after join room: \", msgHistory);\n    dispatch(chatsReceived(msgHistory));\n  });\n};","map":{"version":3,"sources":["E:/9thDimension/Chat/chat-app-second-phase/frontend/src/store/chat/index.js"],"names":["createSlice","SOCKET","initialState","list","isLoading","chatSlice","name","reducers","chatRequested","chats","actions","chatsReceived","payload","reducer","loadChatMessages","socket","roomId","dispatch","getState","emit","emitters","joinRoom","msgHistory","console","log"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AACA,SAAQC,MAAR,QAAqB,iBAArB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,SAAS,EAAE;AAFQ,CAArB;AAKA,MAAMC,SAAS,GAAGL,WAAW,CAAC;AAC5BM,EAAAA,IAAI,EAAE,MADsB;AAE5BJ,EAAAA,YAF4B;AAG5BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAQC,OAAR,KAAoB;AACjCD,MAAAA,KAAK,CAACL,SAAN,GAAkB,IAAlB;AACD,KAHO;AAIRO,IAAAA,aAAa,EAAE,CAACF,KAAD,EAAQC,OAAR,KAAoB;AACjCD,MAAAA,KAAK,CAACN,IAAN,GAAaO,OAAO,CAACE,OAArB;AACAH,MAAAA,KAAK,CAACL,SAAN,GAAkB,KAAlB;AACD;AAPO;AAHkB,CAAD,CAA7B;AAcA,MAAM;AAACI,EAAAA,aAAD;AAAgBG,EAAAA;AAAhB,IAAiCN,SAAS,CAACK,OAAjD;AACA,eAAeL,SAAS,CAACQ,OAAzB,C,CAEA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC1ED,EAAAA,QAAQ,CAACT,aAAa,EAAd,CAAR;AAEAO,EAAAA,MAAM,CAACI,IAAP,CAAYlB,MAAM,CAACmB,QAAP,CAAgBC,QAA5B,EAAsC;AAACL,IAAAA;AAAD,GAAtC,EAAgD,CAAC;AAACM,IAAAA;AAAD,GAAD,KAAkB;AAChEC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,UAAjC;AACAL,IAAAA,QAAQ,CAACN,aAAa,CAACW,UAAD,CAAd,CAAR;AACD,GAHD;AAID,CAPM","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\nimport {SOCKET} from \"../../utils/app\";\n\nconst initialState = {\n  list: [],\n  isLoading: false\n};\n\nconst chatSlice = createSlice({\n  name: \"chat\",\n  initialState,\n  reducers: {\n    chatRequested: (chats, actions) => {\n      chats.isLoading = true;\n    },\n    chatsReceived: (chats, actions) => {\n      chats.list = actions.payload;\n      chats.isLoading = false;\n    }\n  }\n});\n\nconst {chatRequested, chatsReceived} = chatSlice.actions;\nexport default chatSlice.reducer;\n\n// ACTIONS\nexport const loadChatMessages = (socket, roomId) => (dispatch, getState) => {\n  dispatch(chatRequested());\n\n  socket.emit(SOCKET.emitters.joinRoom, {roomId}, ({msgHistory}) => {\n    console.log(\"after join room: \", msgHistory);\n    dispatch(chatsReceived(msgHistory));\n  });\n};"]},"metadata":{},"sourceType":"module"}