{"ast":null,"code":"import { createSelector, createSlice } from \"@reduxjs/toolkit\";\nimport * as apiActions from \"../api\";\nimport { REDUX_STORE, SERVER_ROUTES } from \"../../utils/app\";\nconst initialState = {\n  list: [],\n  isLoading: false\n};\nconst providerSlice = createSlice({\n  name: \"provider\",\n  initialState,\n  reducers: {\n    providersRequested: (providers, actions) => {\n      providers.isLoading = true;\n    },\n    providersReceived: (providers, actions) => {\n      providers.list = actions.payload.providers;\n      providers.isLoading = false;\n    },\n    providerRemoved: (providers, actions) => {\n      providers.list = providers.list.filter(provider => provider.user.id !== actions.payload);\n    }\n  }\n});\nconst {\n  providersRequested,\n  providersReceived,\n  providerRemoved\n} = providerSlice.actions;\nexport default providerSlice.reducer; // SELECTORS\n\nexport const getFilteredProviders = createSelector(state => state.search.searchText, state => state.provider.list, (searchMsg, providers) => {\n  return providers.filter(provider => provider.user.name.toLowerCase().includes(searchMsg));\n}); // ACTIONS\n\nexport const loadProviders = () => (dispatch, getState) => {\n  const actionDispatch = () => {\n    dispatch(apiActions.apiCallBegan({\n      url: SERVER_ROUTES.provider.getAllProvidersForUser,\n      onStart: providersRequested.type,\n      onSuccess: providersReceived.type\n    }));\n  };\n\n  if (!REDUX_STORE.provider.isEnableCache) {\n    actionDispatch();\n    return;\n  }\n\n  const {\n    provider\n  } = getState();\n\n  if (!provider.list || provider.list.length === 0) {\n    actionDispatch();\n  }\n};\nexport const removeProvider = userId => {\n  return providerRemoved(userId);\n};","map":{"version":3,"sources":["E:/9thDimension/Chat/chat-app-second-phase/frontend/src/store/provider/index.js"],"names":["createSelector","createSlice","apiActions","REDUX_STORE","SERVER_ROUTES","initialState","list","isLoading","providerSlice","name","reducers","providersRequested","providers","actions","providersReceived","payload","providerRemoved","filter","provider","user","id","reducer","getFilteredProviders","state","search","searchText","searchMsg","toLowerCase","includes","loadProviders","dispatch","getState","actionDispatch","apiCallBegan","url","getAllProvidersForUser","onStart","type","onSuccess","isEnableCache","length","removeProvider","userId"],"mappings":"AAAA,SAAQA,cAAR,EAAwBC,WAAxB,QAA0C,kBAA1C;AACA,OAAO,KAAKC,UAAZ,MAA4B,QAA5B;AACA,SAAQC,WAAR,EAAqBC,aAArB,QAAyC,iBAAzC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,SAAS,EAAE;AAFQ,CAArB;AAKA,MAAMC,aAAa,GAAGP,WAAW,CAAC;AAChCQ,EAAAA,IAAI,EAAE,UAD0B;AAEhCJ,EAAAA,YAFgC;AAGhCK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,kBAAkB,EAAE,CAACC,SAAD,EAAYC,OAAZ,KAAwB;AAC1CD,MAAAA,SAAS,CAACL,SAAV,GAAsB,IAAtB;AACD,KAHO;AAIRO,IAAAA,iBAAiB,EAAE,CAACF,SAAD,EAAYC,OAAZ,KAAwB;AACzCD,MAAAA,SAAS,CAACN,IAAV,GAAiBO,OAAO,CAACE,OAAR,CAAgBH,SAAjC;AACAA,MAAAA,SAAS,CAACL,SAAV,GAAsB,KAAtB;AACD,KAPO;AAQRS,IAAAA,eAAe,EAAE,CAACJ,SAAD,EAAYC,OAAZ,KAAwB;AACvCD,MAAAA,SAAS,CAACN,IAAV,GAAiBM,SAAS,CAACN,IAAV,CAAeW,MAAf,CAAsBC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,CAAcC,EAAd,KAAqBP,OAAO,CAACE,OAA/D,CAAjB;AACD;AAVO;AAHsB,CAAD,CAAjC;AAiBA,MAAM;AAACJ,EAAAA,kBAAD;AAAqBG,EAAAA,iBAArB;AAAwCE,EAAAA;AAAxC,IAA2DR,aAAa,CAACK,OAA/E;AACA,eAAeL,aAAa,CAACa,OAA7B,C,CAEA;;AACA,OAAO,MAAMC,oBAAoB,GAAGtB,cAAc,CAChDuB,KAAK,IAAIA,KAAK,CAACC,MAAN,CAAaC,UAD0B,EAEhDF,KAAK,IAAIA,KAAK,CAACL,QAAN,CAAeZ,IAFwB,EAGhD,CAACoB,SAAD,EAAYd,SAAZ,KAA0B;AACxB,SAAOA,SAAS,CAACK,MAAV,CAAiBC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,CAAcV,IAAd,CAAmBkB,WAAnB,GAAiCC,QAAjC,CAA0CF,SAA1C,CAA7B,CAAP;AACD,CAL+C,CAA3C,C,CAQP;;AACA,OAAO,MAAMG,aAAa,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACzD,QAAMC,cAAc,GAAG,MAAM;AAC3BF,IAAAA,QAAQ,CACN5B,UAAU,CAAC+B,YAAX,CAAwB;AACtBC,MAAAA,GAAG,EAAE9B,aAAa,CAACc,QAAd,CAAuBiB,sBADN;AAEtBC,MAAAA,OAAO,EAAEzB,kBAAkB,CAAC0B,IAFN;AAGtBC,MAAAA,SAAS,EAAExB,iBAAiB,CAACuB;AAHP,KAAxB,CADM,CAAR;AAOD,GARD;;AAUA,MAAI,CAAClC,WAAW,CAACe,QAAZ,CAAqBqB,aAA1B,EAAyC;AACvCP,IAAAA,cAAc;AACd;AACD;;AAED,QAAM;AAACd,IAAAA;AAAD,MAAaa,QAAQ,EAA3B;;AACA,MAAI,CAACb,QAAQ,CAACZ,IAAV,IAAkBY,QAAQ,CAACZ,IAAT,CAAckC,MAAd,KAAyB,CAA/C,EAAkD;AAChDR,IAAAA,cAAc;AACf;AACF,CApBM;AAsBP,OAAO,MAAMS,cAAc,GAAIC,MAAD,IAAY;AACxC,SAAO1B,eAAe,CAAC0B,MAAD,CAAtB;AACD,CAFM","sourcesContent":["import {createSelector, createSlice} from \"@reduxjs/toolkit\";\nimport * as apiActions from \"../api\";\nimport {REDUX_STORE, SERVER_ROUTES} from \"../../utils/app\";\n\nconst initialState = {\n  list: [],\n  isLoading: false\n};\n\nconst providerSlice = createSlice({\n  name: \"provider\",\n  initialState,\n  reducers: {\n    providersRequested: (providers, actions) => {\n      providers.isLoading = true;\n    },\n    providersReceived: (providers, actions) => {\n      providers.list = actions.payload.providers;\n      providers.isLoading = false;\n    },\n    providerRemoved: (providers, actions) => {\n      providers.list = providers.list.filter(provider => provider.user.id !== actions.payload);\n    }\n  }\n});\n\nconst {providersRequested, providersReceived, providerRemoved} = providerSlice.actions;\nexport default providerSlice.reducer;\n\n// SELECTORS\nexport const getFilteredProviders = createSelector(\n  state => state.search.searchText,\n  state => state.provider.list,\n  (searchMsg, providers) => {\n    return providers.filter(provider => provider.user.name.toLowerCase().includes(searchMsg));\n  }\n);\n\n// ACTIONS\nexport const loadProviders = () => (dispatch, getState) => {\n  const actionDispatch = () => {\n    dispatch(\n      apiActions.apiCallBegan({\n        url: SERVER_ROUTES.provider.getAllProvidersForUser,\n        onStart: providersRequested.type,\n        onSuccess: providersReceived.type\n      })\n    );\n  };\n\n  if (!REDUX_STORE.provider.isEnableCache) {\n    actionDispatch();\n    return;\n  }\n\n  const {provider} = getState();\n  if (!provider.list || provider.list.length === 0) {\n    actionDispatch();\n  }\n};\n\nexport const removeProvider = (userId) => {\n  return providerRemoved(userId);\n};"]},"metadata":{},"sourceType":"module"}